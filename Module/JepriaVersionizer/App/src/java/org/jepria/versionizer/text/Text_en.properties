# Common
optRecoverErrorOrSkip=Recover error manually or skip searching overview files?
reqRecoverError=Recover error manually

# ScenarioInitialConfig
mc_willModuleBeAPartOfVersion=Will module %s be a part of version?
mc_enterModuleRootPath=Enter %s module root (directory having a child 'App')
mc_enterTargetVersionForModule=Enter target Version for %s module
mc_pathDoesNotRepresentADirectoryTryAnother=Path '%s' does not represent a directory, try another
mc_pathDoesNotRepresentADirectoryWithAChildDirectoryAppTryAnother=Path '%s' does not represent a directory with a child directory 'App', try another
mc_pathCannotBeParsedTryAnother=Path '%s' cannot be parsed, try another

# SearchOverviewFiles
sof_msgError=Error searching overview.html files
sof_msgOverviewFilesFoundNone=No overview.html files found in the module
sof_msgOverviewFilesFoundSingle=Found overview file '%s'
sof_msgOverviewFilesFoundMultiple=Found multiple overview files
sof_optOverviewAutoGenerate=Generate overview.html automatically at path '%s', create the file manually or skip?
sof_reqGenerateOverviewManually=Create overview.html file with basic structure manually

# WriteReleaseNotes
wrn_msgError=Error writing release notes into file '%s'
wrn_msgReleaseNotesBlockNotFound=Release Notes block not found in file %s
wrn_optReleaseNotesBlockManualCreate=Create Release Notes block manually or skip the file '%s'?
wrn_reqReleaseNotesBlockManualCreate=Add empty Release Notes block manually into the file '%s'
wrn_msgReleaseNotesExist=Release Notes for the target version %s already exist in the file '%s'
wrn_optReleaseNotesExistUpdate=Update the existing Release Notes automatically, manually, or skip the file '%s'?
wrn_reqReleaseNotesExistWriteManually=Write Release Notes for the target version %s manually at the file '%s'
wrn_msgAddReleaseNotesSuccess=Release Notes for the target version %s successfully added to the file '%s'

# VCS
vcs_obtainCommitMessagesSinceTheLastVersion=%s: Obtain commit messages since the last version and type them line-by-line below.\nConsider commits related to %s module only (%s).\nAt the end type "end".
vcsGit_commitVersion=Do git tag-commit for module %s only (%s): -m "docs(%s): Version %s"
vcsGit_commit=Do regular git commit for this module %s only (%s): -m "chore(%s): %s"
vcsGit_pull=Do git pull for the repo with module %s (%s)
vcsGit_push=Do git push for the repo with module %s (%s)
vcsSvn_synchronize=Synchronize svn: module %s (%s)
vcsSvn_commitVersion=Do svn version-commit (into Trunk and into a new brach Tag/%s) for module %s (%s): -m "[+] Version %s"
vcsSvn_commit=Do regular svn commit for module %s (%s): -m "[*] %s"

#Test Driver
td_reqTest=Test the %s module until the tests successfully pass

#Basic Scenario common
bs_synchronizeBothBinaryRepositories=Synchronize both binary repositories (External and Internal)
bs_addBinariesForTheModuleIntoBothBinaryRepositories=Add binaries for the module %s into both binary repositories: -m"%s"
bs_publishOnTheSourceforge=Publish on the Sourceforge:\nTitle:\n%s\n\nBody:\n%s
bs_haveModuleSourcesBeenChangedSinceTheLastBuild=Have %s module sources been changed since the last build?
bs_setBuildPropertiesAndNecessaryDependenciesToTargetVersion=%s: Set build.properties and necessary dependencies to target version (production)
bs_setBuildPropertiesAndNecessaryDependenciesToTheNextSnapshot=%s: Set build.properties and necessary dependencies to the next snapshot (debug)
bs_runAntCleanBuildAndDoc=%s: Run ant clean, build and doc
bs_createZIPArchiveAndPlaceItIntoTheSharedFolder=%s: Create ZIP archive (include App/lib if absent) and place it into the shared folder